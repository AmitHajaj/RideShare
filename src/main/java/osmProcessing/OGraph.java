package osmProcessing;

import java.util.*;

public class OGraph {
    // edges id generated by calculacateEdgeId() method below:
    private Map<Long, OEdge> edges;
    // access through node id:
    private Map<Long, ONode> nodes;

    private Map<Long, ONode> junctionNodes = new HashMap<>();

    HashMap<Long, Integer> nodesQuantity = new HashMap<>();

    /**
     * Singleton specific properties:
     */

    private static OGraph INSTANCE = new OGraph();

    private OGraph() {
        this.edges = new HashMap<>();
        this.nodes = new HashMap<>();
    }

    public static OGraph getInstance() {
        return INSTANCE;
    }


    /**
     * Getters:
     */

    public Map<Long, OEdge> getEdges() {
        return edges;
    }

    public Map<Long, ONode> getNodes() {
        return nodes;
    }

    public ONode getNode(long key){
        return this.nodes.get(key);
    }

    public Map<Long, ONode> getJunctionNodes() {
        return junctionNodes;
    }

    /**
     * Setters:
     */

    public OEdge addEdge(long id, OEdge e){
        this.edges.put(id, e);
        return e;
    }

    public ONode addNode(ONode node, long id){
        nodes.put(id, node);
        return node;
    }

    public OEdge removeEdge(long id){
        return this.edges.remove(id);
    }
}
